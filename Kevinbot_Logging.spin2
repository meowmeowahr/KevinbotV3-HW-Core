'' =================================================================================================
''
''   File....... Kevinbot_Logging.spin2
''   Purpose.... Kevinbot v3 Logging
''   Notes...... Simple logging via terminal
''   Author..... Kevin Ahr
''               Copyright (c) 2023 Kevin Ahr
''               -- see below for terms of use
''   Started.... 26 APR 2023
''
''   {$P2}
''
'' =================================================================================================

con { logging modes }

  #0, M_DEBUG, M_INFO, M_WARNING, M_ERROR, M_CRITICAL                           ' logging modes
  #0, T_PST, T_ANSI                                                             ' terminal types

var

  byte level
  byte ttype


obj

  term    : "jm_fullduplexserial"                                               ' * serial IO for terminal
  ansi    : "jm_ansi"                                                           '   ANSI terminal control sequences

' * uses cog when loaded

pub null()

'' This is not a top-level object


pub start(baud, type)

  term.tstart(baud)                                                             ' start terminal io
  ttype := type


pub log(mode, source, text) | mode_str

'' Log data using terminal

  case mode
    M_DEBUG   : mode_str := string("DEBUG")
    M_INFO    : mode_str := string("INFO")
    M_WARNING : mode_str := string("WARNING")
    M_ERROR   : mode_str := string("ERROR")
    M_CRITICAL: mode_str := string("CRITICAL")

  if mode >= level
    term.fstr3(string("[%s] [%s] %s", 10, 13), source, mode_str, text)


pub flog1(mode, source, p_str, arg1) | mode_str

'' Log data using terminal

  case mode
    M_DEBUG   : mode_str := string("DEBUG")
    M_INFO    : mode_str := string("INFO")
    M_WARNING : mode_str := string("WARNING")
    M_ERROR   : mode_str := string("ERROR")
    M_CRITICAL: mode_str := string("CRITICAL")

  if mode >= level
    term.fstr2(string("[%s] [%s] %s"), source, mode_str)
    term.fstr1(p_str, arg1)
    term.str(string(10, 13))


pub set_level(new_level)

'' Set new logging level

  level := new_level

  
pub wait_for_terminal(clear)

'' Wait for terminal to be open and key pressed

  term.rxflush()
  term.rx()
  if (clear)
    clear_screen()


pub clear_screen()

'' Move cursor home (upper left) and clear the terminal

  if (ttype == T_PST)
    term.tx(term.HOME)
    term.tx(term.CLS)
  else
    term.str(ansi.hide_cursor())
    term.str(ansi.home())
    term.str(ansi.cls())


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}