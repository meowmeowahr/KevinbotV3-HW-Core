'' =================================================================================================
''
''   File....... ka_utils.spin2
''   Purpose.... Miscellaneous utility methods
''   Author..... Kevin Ahr
''               Copyright (c) 2023 Kevin Ahr
''   License.... MIT License
''   Started.... 03 SEP 2023
''
''   {$P2}
''
'' =================================================================================================


pub null()

'' This is not a top level object


pub map(value, inmin, inmax, outmin, outmax) : result

'' Maps value in range inmin..inmax to new value in range outmin..outmax

  if (value <= inmin)
    return outmin
  elseif (value >= inmax)
    return outmax
  else
    return (value - inmin) * (outmax - outmin) / (inmax - inmin) + outmin


pub split_str2(str, sep, p_d0, p_d1) | len, i, c, vn

'' Split input string into two strings

  bytefill(p_d0, 0, strsize(p_d0))                              ' reset data
  bytefill(p_d1, 0, strsize(p_d1))

  vn := 0
  len := strsize(str)

  repeat i from 0 to len                                        ' loop through chars
    c := byte[str][i]
    if c
      if c == sep and vn < 1                                    ' seperator?
        vn += 1
      else
        if vn == 0
          byte[p_d0][strsize(p_d0)] := c                        ' add char to d0, d1, etc
        else
          byte[p_d1][strsize(p_d1)] := c


pub split_str3(str, sep, p_d0, p_d1, p_d2) | len, i, c, vn

'' Split input string into two strings

  bytefill(p_d0, 0, strsize(p_d0))                              ' reset data
  bytefill(p_d1, 0, strsize(p_d1))
  bytefill(p_d2, 0, strsize(p_d2))

  vn := 0
  len := strsize(str)

  repeat i from 0 to len                                        ' loop through chars
    c := byte[str][i]
    if c
      if c == sep and vn < 2                                    ' seperator?
        vn += 1
      else
        if vn == 0
          byte[p_d0][strsize(p_d0)] := c                        ' add char to d0, d1, etc
        elseif vn == 1
          byte[p_d1][strsize(p_d1)] := c                        ' add char to d0, d1, etc
        else
          byte[p_d2][strsize(p_d2)] := c


pub hex2val(p_src) : result | df, c

'' Convert hex string to value

  df := false

  repeat
    c := byte[p_src++]
    if ((c >= "a") && (c <= "z"))                               ' if lower
      c -= 32                                                   '  make upper
    case c
      " ", "=", "$" :
        if (df)
          quit

      "0".."9" :
        result := (result << 4) | (c - "0")
        df := true

      "A".."F" :
        result := (result << 4) | (c - "A" + 10)
        df := true

      other :
        quit
