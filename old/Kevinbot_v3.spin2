'' =================================================================================================
''
''   File....... Kevinbot_v3.spin2
''   Purpose.... Code for Kevinbot v3
''   Author..... Kevin Ahr
''               Copyright (c) 2022 - 2023 Kevin Ahr
''               -- see below for terms of use
''   Started.... 06 JUN 2022
''
''   {$P2}
''
'' =================================================================================================


{{

  PCA9685 Servo Config
  0  1  2  3  4  5  6  7  8  9  10  11  12  13  14  15
  |           |  |           |  |    |
   -----------    -----------    ----
        '              '          '
    Left Arm       Right Arm     Head

}}


{{

  Error Codes:
  =============================================
  |  BIN  |DEC| ERROR                         |
  |-------------------------------------------|
  |NOBEEP | 0 | Everything OK                 |
  |(0001) | 1 | Invalid Startup Arm Positions |
  |NOBEEP | 2 | Invalid Command from Pi       |
  |(0011) | 3 | BME280 Setup Failed           |
  |(0100) | 4 | BME280 Read Failed            |
  |(0101) | 5 | One Wire Bus Short            |
  |(0110) | 6 | One Wire Bus Error            |
  |(0111) | 7 | One Wire Device not Found     |
  =============================================
}}


con { timing }

  CLK_FREQ = 200_000_000                                        ' system freq as a constant
  MS_001   = CLK_FREQ / 1_000                                   ' ticks in 1ms
  US_001   = CLK_FREQ / 1_000_000                               ' ticks in 1us

  _clkfreq = CLK_FREQ                                           ' set system clock


con { terminal }

  BR_TERM  = 230_400                                            ' terminal baud rate
  BR_RPI   = 230_400                                            ' raspberrypi / xbee baud rate

  #0, T_PST, T_ANSI                                             ' terminal types

  T_TYPE = T_PST


con { fixed io pins }

  RX1      = 63  { I }                                          ' programming / debug
  TX1      = 62  { O }

  SF_CS    = 61  { O }                                          ' serial flash
  SF_SCK   = 60  { O }
  SF_SDO   = 59  { O }
  SF_SDI   = 58  { I }

  SD_SCK   = 61  { O }                                          ' sd card
  SD_CS    = 60  { O }
  SD_SDO   = 59  { O }
  SD_SDI   = 58  { I }

  LED2     = 57  { O }                                          ' Eval and Edge LEDs
  LED1     = 56  { O }


con { app io pins }

  RPI_TX            = 35  { I }                                 ' Raspberry Pi
  RPI_RX            = 36  { O }

  LED               = 34  { O }                                 ' all robot leds (daisy-chained)

  SDA               = 41  { IO }                                ' i2c bus
  SCL               = 42  { IO }                                ' SCL pin must be +1 of SDA

  VOLT1_P           = 37  { I }                                 ' voltage sensors
  VOLT2_P           = 38  { I }

  ONE_WIRE          = 39  { IO }                                ' one wire bus

  BUZZER_PIN        = 40  { O }                                 ' alert buzzer


con { settings }

  #true,  ON, OFF
  #false, NO, YES

  ''''''''''''''''''''''''''''''

  '''      LED Settings      '''

  S_LIGHT_UPDATE_HEAD = 200
  S_LIGHT_UPDATE_BODY = 200
  S_LIGHT_UPDATE_BASE = 200

  S_BODY_BRIGHTNESS = 120
  BODY_MAX          = 250
  BODY_MIN          = 10
  BODY_INC          = 20

  S_BASE_BRIGHTNESS = 120
  BASE_MAX          = 250
  BASE_MIN          = 10
  BASE_INC          = 20

  S_HEAD_EFFECT     = 1
  S_BODY_EFFECT     = 1
  S_BASE_EFFECT     = 1

  #0, L_2811, L_2812
  LED_TYPE          = L_2811

  ''''''''''''''''''''''''''''''

  '''    Sensor Settings     '''

  MONITOR_BATTS     = YES                                       ' use 1 or 2 battery sensors
  MONITOR_TEMPS     = YES                                       ' enable 3x DS18b20

  SENSOR_UPDATE_INT = 3000                                      ' sensor update interval

  ''''''''''''''''''''''''''''''

  '''     Misc Settings      '''

  BUFFER_SIZE       = 32                                        ' command buffer size
  CMD_SIZE          = 32                                        ' max cmd and val name length

  HEAD_LEDS         = 13                                        ' number of leds in head
  BODY_LEDS         = 13                                        ' number of leds in body
  CAM_LEDS          = 11                                        ' number of leds in camera ring
  BASE_LEDS         = 13                                        ' number of leds in base
  TOTAL_LEDS        = HEAD_LEDS+BODY_LEDS+CAM_LEDS+BASE_LEDS    ' total leds in whole robot

  TERMINAL          = NO                                        ' enable terminal debug over usb

  STARTUP_BEEP      = YES                                       ' beep on startup

  ALIVE_INTERVAL    = 1000

  ''''''''''''''''''''''''''''''


con  { servo channels }

  US_MIN            = 500                                       ' min and max microseconds for pca
  US_MAX            = 2400

  HEAD_PAN_CH       = 11                                        ' pan channel
  HEAD_TILT_CH      = 10                                        ' tilt channel

  HEAD_PAN_MIN      = 0                                         ' pan servo min angle
  HEAD_PAN_MAX      = 160                                       ' pan servo max angle

  HEAD_TILT_MIN     = 0                                         ' tilt servo min angle
  HEAD_TILT_MAX     = 160                                       ' tilt servo max angle


obj

' main                                                          ' * master Spin cog
  term    : "jm_fullduplexserial"                               ' * serial IO for terminal
  rpi     : "jm_fullduplexserial"                               ' * serial IO for RPi
  ansi    : "jm_ansi"                                           '   ANSI terminal control sequences

  strs    : "ka_strings"                                        '   string manipulation
  timer1  : "jm_ez_timer"                                       '   timer for leds
  timer2  : "jm_ez_timer"                                       '   timer for leds
  timer3  : "jm_ez_timer"                                       '   timer for leds
  timer4  : "jm_ez_timer"                                       '   timer for sensors
  timer5  : "jm_ez_timer"                                       '   timer for eyes
  timer6  : "jm_ez_timer"                                       '   timer for alive updates
  prng    : "jm_prng"                                           '   TEMPORARY RNG
  nstr    : "jm_nstr"                                           '   number-to-string

  leds    : "jm_rgbx_pixel"                                     ' * WS2812b leds

  pca     : "ka_pca9685"                                        '   pca9685 servo / pwm

  beeper  : "jm_pwm"                                            '   error buzzer pwm

  volt1   : "jm_ez_analog"                                      '   smart pin analog input for voltage meter
  volt2   : "jm_ez_analog"                                      '   smart pin analog input for voltage meter

  tsns    : "jm_ds18b20"                                        '   1-Wire temperature sensor

' * uses cog when loaded


dat

  Banner        byte     "===============", 13
                byte     "  Kevinbot v3  ", 13
                byte     "===============", 13, 0

  Version       byte     "version=v0.1.0", 10, 0                ' version

'                        rr gg bb ww
  CameraColor   long    $FF_FF_FF_00                            ' color for camera ring

  ArmStartup    byte    0, 90, 45, 80, 180, 0, 0, 0, 0, 0       ' startup positions for arms
  HeadStartup   byte    80, 80                                  ' startup positions for head

  ' DS18b20 serial numbers

  SN0           byte    $28, $98, $C0, $23, $0C, $32, $20, $F0  ' left motor
  SN1           byte    $28, $BF, $08, $42, $0C, $32, $20, $C0  ' right motor
  SN2           byte    $28, $2E, $5C, $47, $0C, $32, $20, $4D  ' robot temp


dat { command tables }

  NumCmds       byte    35                                      ' number of commands in table

  Commands
                byte    "eye_bg_color"   , 0                    ' command table
                byte    "pupil_color"    , 0
                byte    "iris_color"     , 0
                byte    "eye_speed"      , 0
                byte    "eye_size"       , 0
                byte    "robot_version"  , 0
                byte    "head_color1"    , 0
                byte    "head_color2"    , 0
                byte    "head_effect"    , 0
                byte    "body_color1"    , 0
                byte    "body_color2"    , 0
                byte    "body_effect"    , 0
                byte    "body_bright-"   , 0
                byte    "body_bright+"   , 0
                byte    "cam_brightness" , 0
                byte    "body_update"    , 0
                byte    "head_x"         , 0
                byte    "head_y"         , 0
                byte    "base_color1"    , 0
                byte    "base_color2"    , 0
                byte    "base_effect"    , 0
                byte    "base_bright-"   , 0
                byte    "base_bright+"   , 0
                byte    "base_update"    , 0
                byte    "left_us"        , 0
                byte    "right_us"       , 0
                byte    "shutdown"       , 0
                byte    "head_update"    , 0
                byte    "pinl"           , 0
                byte    "pinh"           , 0
                byte    "pint"           , 0
                byte    "get_clk"        , 0
                byte    "getms"          , 0
                byte    "stop"           , 0
                byte    "eye_brightness" , 0
                byte    0

  NumHead       byte    6                                       ' number of commands in table

  HeadEffMult   byte    0, 0, 500, 10, 200, 200                 ' effect speed multiplier

  HeadEffects
                byte    "color1"         , 0
                byte    "color2"         , 0
                byte    "flash"          , 0
                byte    "fade"           , 0
                byte    "jump3"          , 0
                byte    "twinkle"        , 0
                byte    0

  NumBody       byte    10                                      ' number of commands in table

  BodyEffMult   byte    0, 0, 500, 10, 200, 200, 70, 5, 8, 7    ' effect speed multiplier

  BodyEffects
                byte    "color1"         , 0
                byte    "color2"         , 0
                byte    "flash"          , 0
                byte    "fade"           , 0
                byte    "jump3"          , 0
                byte    "twinkle"        , 0
                byte    "swipe"          , 0
                byte    "rainbow"        , 0
                byte    "magic"          , 0
                byte    "fire"           , 0
                byte    0

  NumBase       byte    10                                      ' number of commands in table

  BaseEffMult   byte    0, 0, 500, 10, 200, 200, 70, 5, 8, 7    ' effect speed multiplier

  BaseEffects
                byte    "color1"         , 0
                byte    "color2"         , 0
                byte    "flash"          , 0
                byte    "fade"           , 0
                byte    "jump3"          , 0
                byte    "twinkle"        , 0
                byte    "swipe"          , 0
                byte    "rainbow"        , 0
                byte    "magic"          , 0
                byte    "fire"           , 0
                byte    0


var { globals }

  long  scstack[128]

  byte  running

  byte  serial_buf[BUFFER_SIZE]

  byte  cmdstr[CMD_SIZE]                                        ' command as string
  byte  valstr[CMD_SIZE]                                        ' value as string

  byte  sens_cog

  long  pixbuf[TOTAL_LEDS]                                      ' pixel buffer

  ''' leds and animations '''

  long  light_update_head
  long  light_update_body
  long  light_update_base

  long  head_color1
  long  head_color2
  byte  head_effect

  long  body_color1
  long  body_color2
  byte  body_effect
  byte  body_bright

  long  base_color1
  long  base_color2
  byte  base_effect
  byte  base_bright

  byte  head_animation_pos
  byte  head_ani_phase

  byte  body_animation_pos
  byte  body_ani_phase

  byte  base_animation_pos
  byte  base_ani_phase

  byte  error_state                                             ' current hardware error (0 for none)


pub main() | r, d, tc, tf, p, h, status, tc_left, tc_right, ta, tb, tc2, td, te

  light_update_head, light_update_body, head_effect, body_effect := S_LIGHT_UPDATE_HEAD, S_LIGHT_UPDATE_BODY, S_HEAD_EFFECT, S_BODY_EFFECT
  light_update_base, base_effect := S_LIGHT_UPDATE_BASE, S_BASE_EFFECT
  body_bright, base_bright := S_BODY_BRIGHTNESS, S_BASE_BRIGHTNESS

  error_state := 0
  running     := 1

  setup()

  sens_cog := cogspin(newcog, sensor_cog(), @scstack)          ' sensor update cog

  if STARTUP_BEEP                                               ' make startup beeps
    tone(20, 1600, 100)
    tone(20, 800, 150)
    tone(20, 1000, 100)

  if TERMINAL
    term.str(@Banner)

  repeat

    if running == 1
      check_serial()

      if timer6.millis() >= ALIVE_INTERVAL
        timer6.start()
        rpi.fstr1(string("alive=%d", 10), getsec())

      if timer1.millis() >= (light_update_head * byte[@HeadEffMult][head_effect-1]) / 100
        timer1.start()
        case head_effect
          3:
            flash_head()
          5:
            jump3_head()
          4:
            fade_head()
          6:
            twinkle_head()

      if timer2.millis() >= (light_update_body * byte[@BodyEffMult][body_effect-1]) / 100
        timer2.start()
        case body_effect
          3:
            flash_body()
          5:
            jump3_body()
          4:
            fade_body()
          6:
            twinkle_body()
          7:
            swipe_body()
          8:
            rainbow_cycle_body()
          9:
            magic_cycle_body()
          10:
            fire_cycle_body()

      if timer3.millis() >= (light_update_base * byte[@BaseEffMult][base_effect-1]) / 100
        timer3.start()
        case base_effect
          3:
            flash_base()
          5:
            jump3_base()
          4:
            fade_base()
          6:
            twinkle_base()
          7:
            swipe_base()
          8:
            rainbow_cycle_base()
          9:
            magic_cycle_base()
          10:
            fire_cycle_base()

      if timer4.millis() >= SENSOR_UPDATE_INT
        timer4.start()
        update_sensors()

        if error_state > 0
          rpi.fstr1(string("error=%d", 10), error_state)

          ' handle errors with beeper

          if error_state == 1
            repeat
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(1050)
          elseif error_state == 3
            repeat
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(1050)
          elseif error_state == 4
            repeat
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 100)
              waitms(1050)
          elseif error_state == 5
            repeat
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(1050)
          elseif error_state == 6
            repeat
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 100)
              waitms(1050)
          elseif error_state == 7
            repeat
              tone(50, 2000, 100)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(500)
              tone(50, 2000, 1000)
              waitms(1050)


pub stop_robot()

  ' Shutdown robot, stop motors, stop cogs

  running := 0
  waitms(100)
  fill_base($00_00_00_00)
  fill_body($00_00_00_00)
  fill_head($00_00_00_00)
  fill_cam($00_00_00_00)
  ' TODO: Add stop code
  cogstop(sens_cog)


pub check_serial() | index, i, v, vn, len, c

  get_msg(@serial_buf)
  strs.split_str2(@serial_buf, "=", @cmdstr, @valstr)                       ' get message from serial
  index := cmd_index(@cmdstr, @Commands, NumCmds)                           ' split cmd=val message
                                                                            ' get cmd index from command table
  case index

    1..5:
      ' COMMAND DEPRECATED

    6:
      rpi.str(@Version)                                                     ' robot_version (no value)

    7:
      head_color1 := hex2val(@valstr)                                       ' head_color1
      if head_effect == 1
        fill_head(head_color1)

    8:                                                                      ' head_color2
      head_color2 := hex2val(@valstr)
      if head_effect == 2
        fill_head(head_color2)

    9:                                                                      ' head_effect
      head_effect := cmd_index(@valstr, @HeadEffects, NumHead)
      if head_effect == 1
        fill_head(head_color1)
      elseif head_effect == 2
        fill_head(head_color2)

    10:
      body_color1 := hex2val(@valstr)                                       ' body_color1
      if body_effect == 1
        fill_body(body_color1)

    11:                                                                     ' body_color2
      body_color2 := hex2val(@valstr)
      if body_effect == 2
        fill_body(body_color2)

    12:                                                                     ' body_effect
      body_effect := cmd_index(@valstr, @BodyEffects, NumBody)
      if body_effect == 1
        fill_body(body_color1)
      elseif body_effect == 2
        fill_body(body_color2)

    13:                                                                     ' body_bright- (no value)
      ifnot body_bright - BODY_INC < BODY_MIN
        body_bright -= BODY_INC

    14:                                                                     ' body_bright+ (no value)
      ifnot body_bright + BODY_INC > BODY_MAX
        body_bright += BODY_INC

    15:                                                                     ' cam_brightness
      fill_cam(leds.scale_rgbw(CameraColor, dec2val(@valstr)))

    16:                                                                     ' body_update
      light_update_body := dec2val(@valstr)

    17:                                                                     ' head_x
      pca.set_us(HEAD_PAN_CH, deg2us(map(dec2val(@valstr) + 60, 0, 120, HEAD_PAN_MIN, HEAD_PAN_MAX)))

    18:                                                                     ' head_y
      pca.set_us(HEAD_TILT_CH, deg2us(map(dec2val(@valstr) + 60, 0, 120, HEAD_TILT_MIN, HEAD_TILT_MAX)))

    19:                                                                     ' base_color1
      base_color1 := hex2val(@valstr)
      if base_effect == 1
        fill_base(base_color1)

    20:                                                                     ' base_color2
      base_color2 := hex2val(@valstr)
      if base_effect == 2
        fill_base(base_color2)

    21:                                                                     ' base_effect
      base_effect := cmd_index(@valstr, @BaseEffects, NumBase)
      if base_effect == 1
        fill_base(base_color1)
      elseif base_effect == 2
        fill_base(base_color2)

    22:                                                                     ' base_bright- (no value)
      ifnot base_bright - BASE_INC < BASE_MIN
        base_bright -= BASE_INC

    23:                                                                     ' base_bright+ (no value)
      ifnot base_bright + BASE_INC > BASE_MAX
        base_bright += BASE_INC

    24:                                                                     ' base_update
      light_update_base := dec2val(@valstr)

    25:                                                                     ' left_us

    26:                                                                     ' right_us

    27:                                                                     ' shutdown
      stop_robot()

    28:                                                                     ' head_update
      light_update_head := dec2val(@valstr)

    29:                                                                     ' pinl
      pinl(dec2val(@valstr))

    30:                                                                     ' pinh
      pinh(dec2val(@valstr))

    31:                                                                     ' pint
      pint(dec2val(@valstr))

    32:                                                                     ' get_clk
      rpi.fstr1(string("CLK_FREQ=%dzh", 10), CLK_FREQ)

    33:                                                                     ' getms
      rpi.fstr1(string("getms=%d", 10), getms())

    34:                                                                     ' stop

    35:                                                                     ' eye_brightness
      ' COMMAND DEPRECATED


pub fill_body(color) | ch

  repeat ch from BASE_LEDS to BODY_LEDS + BASE_LEDS - 1
    leds.set(ch, color)


pub fill_base(color) | ch

  repeat ch from 0 to BASE_LEDS-1
    leds.set(ch, color)


pub fill_head(color) | ch

  repeat ch from BODY_LEDS + BASE_LEDS to BODY_LEDS + BASE_LEDS + HEAD_LEDS - 1
    leds.set(ch, color)


pub fill_cam(color) | ch

  repeat ch from BODY_LEDS + BASE_LEDS + HEAD_LEDS to BODY_LEDS + BASE_LEDS + HEAD_LEDS + CAM_LEDS - 1
    leds.set(ch, color)


pub set_base(ch, color)

  leds.set(ch, color)


pub set_body(ch, color)

  leds.set(ch+BASE_LEDS, color)


pub set_head(ch, color)

  leds.set(ch + BASE_LEDS + BODY_LEDS, color)


pub setx_body(ch, color, level)

  leds.setx(ch+BASE_LEDS, color, level)


pub setx_head(ch, color, level)

  leds.setx(ch + BASE_LEDS + BODY_LEDS, color, level)


pub update_sensors() | level1, level2, voltage1, voltage2, r, tc, tf, p, h, roll, pitch, yaw

  level1 := volt1.read()
  level2 := volt2.read()
  voltage1 := map(level1, 0, 1000, 0, 358)
  voltage2 := map(level2, 0, 1000, 0, 358)

  if MONITOR_BATTS
    rpi.fstr2(string("batt_volts=%d,%d", 10), voltage1, voltage2)
    waitms(2)


pub sensor_cog() | ta, tb, tc_left, tc_right, tc_robot, status

  tsns.start(ONE_WIRE, tsns.PU_1K5)                                         ' connect to 1W bus with internal pullups

  status := tsns.reset()                                                    ' check for device
  ifnot (status == tsns.GOOD_RESET)
    case status
      tsns.BUS_SHORT : error_state := 5
      tsns.BAD_RESET : error_state := 6
      tsns.NO_DEVICE : error_state := 7

  repeat
    if MONITOR_TEMPS
      ta := getms()
      tc_left  := tsns.read_tca(@SN0)                                       ' read from specific address
      tc_right := tsns.read_tca(@SN1)                                       ' read from specific address
      tc_robot := tsns.read_tca(@SN2)                                       ' read from specific address

      rpi.fstr3(string("temps=%6.2f,%6.2f,%6.2f", 10), (tc_left+50)/100, (tc_right+50)/100, (tc_robot+50)/100)
      tb := getms()
    waitms(SENSOR_UPDATE_INT)


pub twinkle_head() | ch, level, idx

  repeat ch from 0 to HEAD_LEDS-1                                           ' fill string
    level := prng.randomize(0, 255)                                         ' randomize level
    setx_head(ch, head_color1, level)                                       ' update channel


pub fade_head()

  if head_animation_pos > 255
    head_animation_pos := 0

  if head_ani_phase > 1
    head_ani_phase := 0

  if head_animation_pos == 255
    head_ani_phase := 1
  elseif head_animation_pos == 0
    head_ani_phase := 0

  fill_head(leds.morph(head_color1, head_color2, head_animation_pos))

  if head_ani_phase == 0
    head_animation_pos++
  else
    head_animation_pos--


pub flash_head()

  if head_animation_pos == 0
    fill_head(head_color1)
    head_animation_pos++
  elseif head_animation_pos == 1
    fill_head(head_color2)
    head_animation_pos := 0
  else
    head_animation_pos := 0


pub jump3_head()

  if head_animation_pos == 0
    fill_head($FF_00_00_00)
    head_animation_pos++
  elseif head_animation_pos == 1
    fill_head($00_FF_00_00)
    head_animation_pos++
  elseif head_animation_pos == 2
    fill_head($00_00_FF_00)
    head_animation_pos := 0
  else
    head_animation_pos := 0


pub flash_body()

  if body_animation_pos == 0
    fill_body(body_color1)
    body_animation_pos++
  elseif body_animation_pos == 1
    fill_body(body_color2)
    body_animation_pos := 0
  else
    body_animation_pos := 0


pub jump3_body()

  if body_animation_pos == 0
    fill_body($FF_00_00_00)
    body_animation_pos++
  elseif body_animation_pos == 1
    fill_body($00_FF_00_00)
    body_animation_pos++
  elseif body_animation_pos == 2
    fill_body($00_00_FF_00)
    body_animation_pos := 0
  else
    body_animation_pos := 0


pub jump3_base()

  if base_animation_pos == 0
    fill_base($FF_00_00_00)
    base_animation_pos++
  elseif base_animation_pos == 1
    fill_base($00_FF_00_00)
    base_animation_pos++
  elseif base_animation_pos == 2
    fill_base($00_00_FF_00)
    base_animation_pos := 0
  else
    base_animation_pos := 0


pub flash_base()

  if base_animation_pos == 0
    fill_base(base_color1)
    base_animation_pos++
  elseif base_animation_pos == 1
    fill_base(base_color2)
    base_animation_pos := 0
  else
    base_animation_pos := 0


pub twinkle_body() | ch, level, idx

  repeat ch from 0 to BODY_LEDS - 1                                         ' fill body leds
    level := prng.randomize(0, 255)                                         ' randomize level
    setx_body(ch, body_color1, level)                                       ' update channel


pub twinkle_base() | ch, level, idx

  repeat ch from 0 to BASE_LEDS-1                                            ' fill base leds
    level := prng.randomize(0, 255)                                          ' randomize level
    leds.setx(ch, base_color1, level)                                        ' update channel


pub fade_body()

  if body_animation_pos > 255
    body_animation_pos := 0

  if body_ani_phase > 1
    body_ani_phase := 0

  if body_animation_pos == 255
    body_ani_phase := 1
  elseif body_animation_pos == 0
    body_ani_phase := 0

  fill_body(leds.morph(body_color1, body_color2, body_animation_pos))

  if body_ani_phase == 0
    body_animation_pos++
  else
    body_animation_pos--


pub fade_base()

  if base_animation_pos > 255
    base_animation_pos := 0

  if base_ani_phase > 1
    base_ani_phase := 0

  if base_animation_pos == 255
    base_ani_phase := 1
  elseif base_animation_pos == 0
    base_ani_phase := 0

  fill_base(leds.morph(base_color1, base_color2, base_animation_pos))

  if base_ani_phase == 0
    base_animation_pos++
  else
    base_animation_pos--


pub swipe_body() | i, nf

  if body_ani_phase == 0
    set_body(body_animation_pos, body_color1)
    if body_animation_pos == BODY_LEDS - 2
      body_ani_phase := 1
    body_animation_pos++
  elseif body_ani_phase == 1
    set_body(body_animation_pos, body_color2)
    if body_animation_pos == 0
      body_ani_phase := 0
    body_animation_pos--
  else
    body_ani_phase := 0


pub swipe_base() | i, nf

  if base_ani_phase == 0
    leds.set(base_animation_pos, base_color1)
    if base_animation_pos == BASE_LEDS - 1
      base_ani_phase := 1
    base_animation_pos++
  elseif base_ani_phase == 1
    leds.set(base_animation_pos-1, base_color2)
    if base_animation_pos == 0
      base_ani_phase := 0
    base_animation_pos--
  else
    base_ani_phase := 0


pub rainbow_cycle_body() | ch

  if ++body_animation_pos > 255
    body_animation_pos := 0

  repeat ch from 0 to BODY_LEDS - 1
    set_body(ch, leds.scale_rgbw(leds.wheel(((ch * 256 / BODY_LEDS) + body_animation_pos) & $FF), body_bright))


pub rainbow_cycle_base() | ch

  if ++base_animation_pos > 255
    base_animation_pos := 0

  repeat ch from 0 to BASE_LEDS - 1
    leds.set(ch, leds.scale_rgbw(leds.wheel(((ch * 256 / BASE_LEDS) + base_animation_pos) & $FF), base_bright))


pub magic_cycle_body() | ch, pixel_index, color

  if ++body_animation_pos > 255
    body_animation_pos := 0

  repeat ch from 0 to BODY_LEDS - 1
    pixel_index := (ch * 256 / BODY_LEDS) + body_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - BODY_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := map(color, -1000, 1000, 120, 200)
    set_body(ch, leds.scale_rgbw(leds.wheel(color & 255), body_bright))


pub magic_cycle_base() | ch, pixel_index, color

  if ++base_animation_pos > 255
    base_animation_pos := 0

  repeat ch from 0 to BASE_LEDS - 1
    pixel_index := (ch * 256 / BASE_LEDS) + base_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - BASE_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := map(color, -1000, 1000, 120, 200)
    leds.set(ch, leds.scale_rgbw(leds.wheel(color & 255), base_bright))


pub fire_cycle_body() | ch, pixel_index, color

  if ++body_animation_pos > 255
    body_animation_pos := 0

  repeat ch from 0 to BODY_LEDS - 1
    pixel_index := (ch * 256 / BODY_LEDS) + body_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - BODY_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := map(color, -1000, 1000, 0, 20)
    set_body(ch, leds.scale_rgbw(leds.wheel(color & 255), body_bright))


pub fire_cycle_base() | ch, pixel_index, color

  if ++base_animation_pos > 255
    base_animation_pos := 0

  repeat ch from 0 to BASE_LEDS - 1
    pixel_index := (ch * 256 / BASE_LEDS) + base_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - BASE_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := map(color, -1000, 1000, 0, 20)
    leds.set(ch, leds.scale_rgbw(leds.wheel(color & 255), base_bright))


pub tone(amp, freq, length)

  beeper.start(BUZZER_PIN, amp, freq, beeper.M_TRI)
  waitms(length)
  beeper.write(0)


pub get_msg(p_dest) : len | c

'' Receive message from serial into p_dest
'' -- maxlen specifies maximum length to recieve

  bytefill(p_dest, 0, BUFFER_SIZE)                                ' clear buffer


  repeat BUFFER_SIZE-1
    c := rpi.rxtime(1)                                            ' look for message
    if c
      case c
        0..12 :
          ifnot c == 8                                            ' backspace
            byte[p_dest][len++] := c                              ' add to string
            if (c == $0D)                                         ' if end of hrc
              return                                              '  done!
          else
            byte[p_dest][len--] := c                              ' remove from string
            next

        13 :                                                      ' ignore cr
          return

        14..26 :
          byte[p_dest][len++] := c                                ' add to string
          if (c == $0D)                                           ' if end of hrc
            return                                                '  done!

        27 :                                                      ' ignore spaces
          return

        28..126 :
          byte[p_dest][len++] := c                                ' add to string
          if (c == $0D)                                           ' if end of hrc
            return                                                '  done!

        -1 :
          return
    else
      return


pub cmd_index(p_src, p_list, nc) : idx | byte buf[CMD_SIZE], x, c

'' Convert command string into value
'' -- not case sensitive
'' -- returns 1..n if found in command table
'' -- returns 0 (false) if not found

  bytemove(@buf, p_src, strsize(p_src)+1)                       ' copy string + terminator

  x := 0
  repeat
    c := buf[x]
    if (c == 0)                                                 ' end of string
      quit
    elseif ((c >= "A") && (c <= "Z"))                           ' if uppercase
      buf[x] += 32                                              '  make lowercase
    x++

  repeat nc
    if (strcomp(@buf, p_list))
      return idx+1
    else
      idx += 1                                                  ' update index
      p_list += strsize(p_list) + 1                             ' update list pointer

  return 0


pub map(value, inmin, inmax, outmin, outmax) : result

'' Maps value in range inmin..inmax to new value in range outmin..outmax

  if (value <= inmin)
    return outmin
  elseif (value >= inmax)
    return outmax
  else
    return (value - inmin) * (outmax - outmin) / (inmax - inmin) + outmin


pub dec2val(p_src) : result | df, sign, c

'' Convert decimal string to numeric value

  df   := false
  sign := 1

  repeat
    c := byte[p_src++]
    case c
      " ", "=" :
        if (df)
          quit

      "-" :
        if (df)
          quit
        else
          sign := -1
          df := true

      "0".."9" :
        result := result * 10 + (c - "0")
        df := true

      0, $0D :                                                  ' end of string
        quit

  result *= sign


pub hex2val(p_src) : result | df, c

'' Convert hex string to value

  df := false

  repeat
    c := byte[p_src++]
    if ((c >= "a") && (c <= "z"))                               ' if lower
      c -= 32                                                   '  make upper
    case c
      " ", "=", "$" :
        if (df)
          quit

      "0".."9" :
        result := (result << 4) | (c - "0")
        df := true

      "A".."F" :
        result := (result << 4) | (c - "A" + 10)
        df := true

      other :
        quit


pub deg2us(deg) : us

  us := map(deg, 0, 180, US_MIN, US_MAX)
  return us


pub setup() | r, ch
'' Configure IO and objects for application

  if TERMINAL
    term.tstart(BR_TERM)                                                      ' start terminal io

  rpi.start(RPI_RX, RPI_TX, %0000, BR_RPI)                                    ' start serial for rpi

  if LED_TYPE == L_2812
    leds.start_2812b(@pixbuf, TOTAL_LEDS, LED, 5)
  elseif LED_TYPE == L_2811
    leds.start_2811(@pixbuf, TOTAL_LEDS, LED, 5)

  volt1.start(VOLT1_P, 0, 1000)                                               ' configure analog input for voltage
  volt2.start(VOLT2_P, 0, 1000)                                               ' configure analog input for voltage

  pca.start(SCL, SDA, 100, pca.PU_1K5)

  repeat ch from 0 to 9
    pca.set_us(ch, deg2us(byte[@ArmStartup][ch]))
    if (byte[@ArmStartup][ch] > 180) or (byte[@ArmStartup][ch] < 0)
      error_state := 1


  pca.set_us(HEAD_PAN_CH, deg2us(byte[@HeadStartup][0]))        ' pan
  if (byte[@HeadStartup][0] > 180) or (byte[@HeadStartup][0] < 0)
    error_state := 1

  pca.set_us(HEAD_TILT_CH, deg2us(byte[@HeadStartup][1]))       ' tilt
  if (byte[@HeadStartup][1] > 180) or (byte[@HeadStartup][1] < 0)
    error_state := 1

  timer1.start()
  timer2.start()
  timer3.start()
  timer4.start()
  timer5.start()



pub wait_for_terminal(clear)

'' Wait for terminal to be open and key pressed

  term.rxflush()
  term.rx()
  if (clear)
    clear_screen()


pub clear_screen()

'' Move cursor home (upper left) and clear the terminal

  if (T_TYPE == T_PST)
    term.tx(term.HOME)
    term.tx(term.CLS)
  else
    term.str(ansi.hide_cursor())
    term.str(ansi.home())
    term.str(ansi.cls())


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}