'' =================================================================================================
''
''   File....... KevinbotV3_StatusDisplay.spin2
''   Purpose.... Provide a Status Display for Kevinbot v3 Core
''   Author..... Kevin Ahr
''               Copyright (c) 2023 Kevin Ahr
''   License.... MIT License
''   Started....
''   Updated.... 20 JUN 2024
''
''   {$P2}
''
'' =================================================================================================


con { pullups }

  #0, PU_NONE, PU_1K5, PU_3K3, PU_15K                                           ' pull-up options


con { chars }

  CC_NONE       = -1                                                            ' no icon
  CC_CHECK      = 0                                                             ' checkmark
  CC_REFRESH_1  = 1                                                             ' refresh 1
  CC_REFRESH_2  = 2                                                             ' refresh 2
  CC_ERROR      = 3                                                             ' exclamation mark


obj

  lcd   : "jm_lcd_pcf8574"                                                      '   status lcd


dat

CheckMark     byte      $00, $01, $03, $16, $1C, $08, $00, $00                  ' custom characters
Refresh1      byte      $0D, $13, $07, $00, $00, $1C, $19, $16
Refresh2      byte      $16, $19, $1C, $00, $00, $07, $13, $0D
Error         byte      $0E, $0E, $0E, $0E, $04, $00, $0E, $0E


var

  byte  running
  byte  lcd_icon


pub null()

'' This is not a top level object


pub start(address, scl, sda, khz, pullup) : output

'' Start thermometers
'' -- address.... i2c Address of PCF-based lcd display
'' -- scl and sda define i2c bus
'' -- khz is bus speed, typically 100
'' -- pullup is high level drive configuration

  output := lcd.start(address, scl, sda, khz, pullup)
  lcd.set_char(CC_CHECK, @CheckMark)
  lcd.set_char(CC_REFRESH_1, @Refresh1)
  lcd.set_char(CC_REFRESH_2, @Refresh2)
  lcd.set_char(CC_ERROR, @Error)


pub display_main_lines(p_line0, p_line1)

  display_line(0, p_line0)
  display_line(1, p_line1)


pub display_line(line, p_line)

  lcd.crsr_xy(0, line)
  lcd.str(p_line)


pub str(p_str)

'' Print z-string
'  -- borrowed from FullDuplexSerial

  lcd.str(p_str)


pub crsr_xy(x, y)

'' Moves DDRAM cursor to column, row position
'' -- home position is indexed as 0, 0

  lcd.crsr_xy(x, y)


pub display_status_icon(icon)

  lcd.crsr_xy(15, 1)

  if icon == CC_NONE
    lcd.out("")
  else
    lcd.out(icon)

lcd_icon := icon


pub get_lcd_icon() : result

  return lcd_icon


pub clear()

  lcd.clear()

pub set_backlight(on)

  lcd.backlight(on)