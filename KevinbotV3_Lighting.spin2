'' =================================================================================================
''
''   File....... KevinbotV3_Lighting.spin2
''   Purpose....
''   Author..... Kevin Ahr
''               Copyright (c) 2024 Kevin Ahr
''   License.... MIT License
''
''   {$P2}
''
'' =================================================================================================

obj

' main                                                          ' * master Spin cog
  leds  : "jm_rgbx_pixel"                                       ' * ws281x driver
  prng  : "jm_prng"                                             '   psuedo rng
  utils : "ka_utils"                                            '   misc utils
  sett  : "KevinbotV3_Settings"                                 '   Kevinbot v3 Static Settings
  pins  : "KevinbotV3_Pinmap"                                   '   Kevinbot v3 Static Pinmap
  const : "KevinbotV3_LedConsts"                                '   Kevinbot v3 Led consts
' * uses cog when loaded


var { globals }

  byte pin

  long pixbuf[sett.TOTAL_LEDS]

  byte  head_animation_pos
  byte  head_ani_phase

  byte  body_animation_pos
  byte  body_ani_phase

  byte  base_animation_pos
  byte  base_ani_phase


pub null()

'' This is not a top-level object


pub start()

'' Configure IO and objects for application

  case sett.LEDS_TYPE
    const.TYPE_2812B:
      leds.start_2812b(@pixbuf, sett.TOTAL_LEDS, pins.LED, 5)
    const.TYPE_2812:
      leds.start_2812(@pixbuf, sett.TOTAL_LEDS, pins.LED, 5)
    const.TYPE_2811:
      leds.start_2811(@pixbuf, sett.TOTAL_LEDS, pins.LED, 5)
    const.TYPE_2813:
      leds.start_2813(@pixbuf, sett.TOTAL_LEDS, pins.LED, 5)
    const.TYPE_6812X_RGB:
      leds.start_6812x(@pixbuf, sett.TOTAL_LEDS, pins.LED, 5, 24)
    const.TYPE_6812X_RGBW:
      leds.start_6812x(@pixbuf, sett.TOTAL_LEDS, pins.LED, 5, 32)

pub fill_body(color) | ch

  repeat ch from sett.BASE_LEDS to sett.BODY_LEDS + sett.BASE_LEDS - 1
    leds.set(ch, color)


pub fill_base(color) | ch

  repeat ch from 0 to sett.BASE_LEDS-1
    leds.set(ch, color)


pub fill_head(color) | ch

  repeat ch from sett.BODY_LEDS + sett.BASE_LEDS to sett.BODY_LEDS + sett.BASE_LEDS + sett.HEAD_LEDS - 1
    leds.set(ch, color)


pub fill_cam(color) | ch

  repeat ch from sett.BODY_LEDS + sett.BASE_LEDS + sett.HEAD_LEDS to sett.BODY_LEDS + sett.BASE_LEDS + sett.HEAD_LEDS + sett.CAM_LEDS - 1
    leds.set(ch, color)


pub set_base(ch, color)

  leds.set(ch, color)


pub set_body(ch, color)

  leds.set(ch + sett.BASE_LEDS, color)


pub set_head(ch, color)

  leds.set(ch + sett.BASE_LEDS + sett.BODY_LEDS, color)


pub setx_body(ch, color, level)

  leds.setx(ch + sett.BASE_LEDS, color, level)


pub setx_head(ch, color, level)

  leds.setx(ch + sett.BASE_LEDS + sett.BODY_LEDS, color, level)


{ animations }

pub twinkle_head(head_color1) | ch, level, idx

  repeat ch from 0 to sett.HEAD_LEDS-1
    level := prng.randomize(0, 255)                                         ' randomize level
    setx_head(ch, head_color1, level)                                       ' update channel


pub fade_head(head_color1, head_color2)

  if head_animation_pos > 255
    head_animation_pos := 0

  if head_ani_phase > 1
    head_ani_phase := 0

  if head_animation_pos == 255
    head_ani_phase := 1
  elseif head_animation_pos == 0
    head_ani_phase := 0

  fill_head(leds.morph(head_color1, head_color2, head_animation_pos))

  if head_ani_phase == 0
    head_animation_pos++
  else
    head_animation_pos--


pub flash_head(head_color1, head_color2)

  if head_animation_pos == 0
    fill_head(head_color1)
    head_animation_pos++
  elseif head_animation_pos == 1
    fill_head(head_color2)
    head_animation_pos := 0
  else
    head_animation_pos := 0


pub jump3_head()

  if head_animation_pos == 0
    fill_head($FF_00_00_00)
    head_animation_pos++
  elseif head_animation_pos == 1
    fill_head($00_FF_00_00)
    head_animation_pos++
  elseif head_animation_pos == 2
    fill_head($00_00_FF_00)
    head_animation_pos := 0
  else
    head_animation_pos := 0


pub flash_body(body_color1, body_color2)

  if body_animation_pos == 0
    fill_body(body_color1)
    body_animation_pos++
  elseif body_animation_pos == 1
    fill_body(body_color2)
    body_animation_pos := 0
  else
    body_animation_pos := 0


pub jump3_body()

  if body_animation_pos == 0
    fill_body($FF_00_00_00)
    body_animation_pos++
  elseif body_animation_pos == 1
    fill_body($00_FF_00_00)
    body_animation_pos++
  elseif body_animation_pos == 2
    fill_body($00_00_FF_00)
    body_animation_pos := 0
  else
    body_animation_pos := 0


pub jump3_base()

  if base_animation_pos == 0
    fill_base($FF_00_00_00)
    base_animation_pos++
  elseif base_animation_pos == 1
    fill_base($00_FF_00_00)
    base_animation_pos++
  elseif base_animation_pos == 2
    fill_base($00_00_FF_00)
    base_animation_pos := 0
  else
    base_animation_pos := 0


pub flash_base(base_color1, base_color2)

  if base_animation_pos == 0
    fill_base(base_color1)
    base_animation_pos++
  elseif base_animation_pos == 1
    fill_base(base_color2)
    base_animation_pos := 0
  else
    base_animation_pos := 0


pub twinkle_body(body_color1) | ch, level, idx

  repeat ch from 0 to sett.BODY_LEDS - 1                                         ' fill body leds
    level := prng.randomize(0, 255)                                         ' randomize level
    setx_body(ch, body_color1, level)                                       ' update channel


pub twinkle_base(base_color1) | ch, level, idx

  repeat ch from 0 to sett.BASE_LEDS-1                                            ' fill base leds
    level := prng.randomize(0, 255)                                          ' randomize level
    leds.setx(ch, base_color1, level)                                        ' update channel


pub fade_body(body_color1, body_color2)

  if body_animation_pos > 255
    body_animation_pos := 0

  if body_ani_phase > 1
    body_ani_phase := 0

  if body_animation_pos == 255
    body_ani_phase := 1
  elseif body_animation_pos == 0
    body_ani_phase := 0

  fill_body(leds.morph(body_color1, body_color2, body_animation_pos))

  if body_ani_phase == 0
    body_animation_pos++
  else
    body_animation_pos--


pub fade_base(base_color1, base_color2)

  if base_animation_pos > 255
    base_animation_pos := 0

  if base_ani_phase > 1
    base_ani_phase := 0

  if base_animation_pos == 255
    base_ani_phase := 1
  elseif base_animation_pos == 0
    base_ani_phase := 0

  fill_base(leds.morph(base_color1, base_color2, base_animation_pos))

  if base_ani_phase == 0
    base_animation_pos++
  else
    base_animation_pos--


pub swipe_body(body_color1, body_color2) | i, nf

  if body_ani_phase == 0
    set_body(body_animation_pos, body_color1)
    if body_animation_pos == sett.BODY_LEDS - 2
      body_ani_phase := 1
    body_animation_pos++
  elseif body_ani_phase == 1
    set_body(body_animation_pos, body_color2)
    if body_animation_pos == 0
      body_ani_phase := 0
    body_animation_pos--
  else
    body_ani_phase := 0


pub swipe_base(base_color1, base_color2) | i, nf

  if base_ani_phase == 0
    leds.set(base_animation_pos, base_color1)
    if base_animation_pos == sett.BASE_LEDS - 1
      base_ani_phase := 1
    base_animation_pos++
  elseif base_ani_phase == 1
    leds.set(base_animation_pos-1, base_color2)
    if base_animation_pos == 0
      base_ani_phase := 0
    base_animation_pos--
  else
    base_ani_phase := 0


pub rainbow_cycle_body(body_bright) | ch

  if ++body_animation_pos > 255
    body_animation_pos := 0

  repeat ch from 0 to sett.BODY_LEDS - 1
    set_body(ch, leds.scale_rgbw(leds.wheel(((ch * 256 / sett.BODY_LEDS) + body_animation_pos) & $FF), body_bright))


pub rainbow_cycle_base(base_bright) | ch

  if ++base_animation_pos > 255
    base_animation_pos := 0

  repeat ch from 0 to sett.BASE_LEDS - 1
    leds.set(ch, leds.scale_rgbw(leds.wheel(((ch * 256 / sett.BASE_LEDS) + base_animation_pos) & $FF), base_bright))


pub magic_cycle_body(body_bright) | ch, pixel_index, color

  if ++body_animation_pos > 255
    body_animation_pos := 0

  repeat ch from 0 to sett.BODY_LEDS - 1
    pixel_index := (ch * 256 / sett.BODY_LEDS) + body_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - sett.BODY_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := utils.map(color, -1000, 1000, 120, 200)
    set_body(ch, leds.scale_rgbw(leds.wheel(color & 255), body_bright))


pub magic_cycle_base(base_bright) | ch, pixel_index, color

  if ++base_animation_pos > 255
    base_animation_pos := 0

  repeat ch from 0 to sett.BASE_LEDS - 1
    pixel_index := (ch * 256 / sett.BASE_LEDS) + base_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - sett.BASE_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := utils.map(color, -1000, 1000, 120, 200)
    leds.set(ch, leds.scale_rgbw(leds.wheel(color & 255), base_bright))


pub fire_cycle_body(body_bright) | ch, pixel_index, color

  if ++body_animation_pos > 255
    body_animation_pos := 0

  repeat ch from 0 to sett.BODY_LEDS - 1
    pixel_index := (ch * 256 / sett.BODY_LEDS) + body_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - sett.BODY_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := utils.map(color, -1000, 1000, 0, 20)
    set_body(ch, leds.scale_rgbw(leds.wheel(color & 255), body_bright))


pub fire_cycle_base(base_bright) | ch, pixel_index, color

  if ++base_animation_pos > 255
    base_animation_pos := 0

  repeat ch from 0 to sett.BASE_LEDS - 1
    pixel_index := (ch * 256 / sett.BASE_LEDS) + base_animation_pos
    ' 20 can be changed to control how many leds are in a color
    color := qsin(1000, pixel_index / 4 - sett.BASE_LEDS, 20)
    ' 120 and 200 is the range of colors
    color := utils.map(color, -1000, 1000, 0, 20)
    leds.set(ch, leds.scale_rgbw(leds.wheel(color & 255), base_bright))


con { license }

{{

  Terms of Use: MIT License

  Permission is hereby granted, free of charge, to any person obtaining a copy of this
  software and associated documentation files (the "Software"), to deal in the Software
  without restriction, including without limitation the rights to use, copy, modify,
  merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
  permit persons to whom the Software is furnished to do so, subject to the following
  conditions:

  The above copyright notice and this permission notice shall be included in all copies
  or substantial portions of the Software.

  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
  INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
  PARTICULAR PURPOSE AND NON-INFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
  HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
  CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE
  OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.

}}